[
  {
    name: "JavaScript",
    experience: "5 years",
    logo: JsLogoPng,
    description: {
      ru: `Все началось с верстки и jquery.
      Потом хотелось улучшать интерфейсы после чего работать над интерфейсами,
      особено нравилось работать над новыми идеями в UX. За все время работы с js
      я делал десятки лендингов, web-terminal, редактор кода, стриминговые сервисы для игр используя
      pixel-streaming от Unreal Engine и видео стриминг используя HLS и ffmpeg для небольших проектов.
      Для таких проектов основными инструментами для разработки приложений стали react и vue и material ui.
      Автоматическая генерация форм на основе jsonschema которая составлялась на основе yang-моделей и адаптировал
      стили встроенных сторонних frame'оф используя MutationObserver.
      Приходилось решать проблемы оптимизации, решать проблемы с redux который не был способен так быстро
      сохранять данные. Фото-редактор основанный на canvas и fabric.js интерфейс похожий на Figma Jam реализованый в DOM
      с добавлением чуть-чуть SVG. Dashboards с собсвенным DSL, графики, визуализация данных используя ApexChart, d3 и Recharts.
      Node.js для создания бекенда я выбирал редко, в основном когда были очень хорошие библиотеки решаюшие бизнес задачи и создавался
      отдельный микросервис или когда понимал что команда сможет поддерживать только js.
      `,
      en: ''
    },
    tags: [STACK_TAGS.FrontEnd]
  },
  {
    name: "React",
    experience: "3 years",
    logo: ReactLogo,
    description: {
      ru: `Вперые я столкнулся с React когда наш фронтенд разработчик сдался пытаться понять кучу
      пайпов написанных в функциональном стиле. Это было экстримальное погружение, но иногда это работает.
      Использую классовые компоненты когда не могу использовать функциональные - код чище. В основном использую redux
      уменьшая риски для поиска фронтенд разработчиков. Thunk и Саги работал с mobX и effector но последние 2 года с
      redux-toolkit. Сложные рекурсивные компоненты, построение интерфейсов на основе DSL, построение UI систем
      согласованных с задумкой дизайнера как это возможно. WebSocket, WebRTC, Pixel Streaming от Unreal Engine.
      Тестирование компонентов и использование Storybook'ов.
      Не большой опыт с SSR & SSG.
      `,
      en: ''
    },
    tags: [STACK_TAGS.FrontEnd]

  },
  {
    name: "Vue",
    experience: "1 years",
    logo: VueLogo,
    description: {
      ru: `Vue & vuex. Последние проекты сделал на Typescript. Сервис для стриминга видео
      и интерфейс управления проектом на Unreal Engine через Pixel Streaming.
      `,
      en: ''
    },
    tags: [STACK_TAGS.FrontEnd]

  },
  {
    name: "ffmpeg",
    experience: "1 years",
    logo: FFmpegLogo,
    description: {
      ru: `Настольная утилита на все случаи жизни. Разбить 4к видео на маленькие фрагменты разного размера и качества.
      Конвертировать формат изображений или превратить mp3 в wav или pcm. Даже использовал его на бекенде чтобы подготавливать
      фотографии загруженные пользователем - работало быстрее.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "JetBrains",
    experience: "1 years",
    logo: JetbrainsLogo,
    description: {
      ru: `В какой-то момент я осознано принял для себя решение что безумно удобно скачать IDE для любого
      языка программирование и сыкономить кучу времени на разного рода настройки. Безспорный плюс при изучении нового языка программирования.
      WebStorm, PyCharm, IntelliJ, GoLand - все это уже было интуитивно понятно при решении задач и изучении новых языков.
      Особенно встроенные возможности вроде http запросов. Целые команды когда узнавали о них сразу же начали использовать что даже
      частично могло заменить нам Postman.
      Единственное исключение тут составлял C++ и C# где при необходимости я однозначно выберу Visual Studio.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "Tasks Management ",
    experience: "1 years",
    logo: TasksManagementLogo,
    description: {
      ru: `Jira, YouTrack, Trello, Asana - и другие таск менеджера которые были использовании в ходе творческого поиска руководителей
      проектов. Был опыт полного перестраивания процессов с целью избавления от ежедневной рутини и стандартизации процессов в
      маленькой компании. Все же бесконечные просьбы и демонстрации не прошли даром. Были пройдены все круги ада в
      построении инфраструктуры которая действительно способствовала процессам к!!!!!уда входили и конфигурации CI/DI для разных окружений.
      Работа была выполнена, результатом которой стало упрощение процессов и осознание цены перестройки рабочих процессов.
      Самым частым конечно же была Jira. Но моим однозначным фаворитом был YouTrack за простоту, гибкость и интуитивность интерфейса.
      За Markdown и возможность составлять удобные дашборды.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "Wiki's",
    experience: "1 years",
    logo: WikisLogo,
    description: {
      ru: `
      Confluence использовался для работы - для личных нужд Notion. Оба инструмента обладают достаточным функционалом
      за исключением некоторых ситуаций когда вы храните устаревшию версию и например при импорте таблицы из CSV нельзя выбрать
      символ-разделитель и что большие статьи и таблицы приводят к некоторым проблемам при сохранении в Confluence.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "Markdown",
    description: {
      ru: `В эту секцию я решил поместить все что связано с разметкой и ее генерацией. грубо говоря M в MVC.
      Создатель всемирной паутины решил для нас и эту проблему, собственно я успел поработать с XSLT(eXtensible Stylesheet Language),
      сейчас встретить эту технологию довольно трудно, грубо говоря это XML с циклами, условиями и переменными.
      В общем случае приходилось сталкиваться с Jinja2(Django) и подобными, например в Laravel. В vue/react я влюбился мгновенно
      как многие другие. Он казался логичным и естественным продолжением и решал проблемы скорости работы DOM!!!!!!. Периодически посещавшие
      меня во время работы. Компоненты и JSX стали логичным продолжением.
      CSS, SCSS, styled components, css-modules и Emotion  я тоже оставлю тут.`,
      en: ''
    },
    experience: "5 years",
    logo: MarkdownLogo,
    tags: [STACK_TAGS.FrontEnd]

  },
  {
    name: "Python",
    experience: "5 years",
    logo: PythonLogo,
    description: {
      ru: `Изучения python я начал еще в университете чему способствовал Марк Лутц и его 4ое издание.
      Коммерчески поработать с python много не удалось, в основном это были не большие микросервисы на Flask или FastApi.
      Тот же Django использовался только для университетских проектов. Python для меня был самым главным инструментом
      для решения любых задач: парсинг и скрапинг, тестирование возможностей стороних библиотек, боты, а так же интерфейсы
      используя tkinter и PyQt.
      Это был язык который спас меня от MatLab когда я проходил практику в Институте Искуственного Интеллекта где я познакомился
      с Word2Vec, Doc2Vec, FastText, TensorFlow и gensim в NLP благодаря которым я написал свою дипломную работу и использовал
      классификаторы как микросервис обернутый в Flask.
      `,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]

  },
  {
    name: "С++",
    experience: "5 years",
    logo: CppLogo,
    description: {
      ru: `Мой первый язык программирования. Когда я впервые увидел книгу Страуструпа - было страшно.
      С ним я разобрался с тем как устроеен мир, стек и куча, что такое ссылки и указатели,
      сборшик мусора, ООП, использовал static_cast и dynamic_cast при изучении полиморфизма. Самую первую придуманную программу которая
      позволяла объеденить несколько мессенджеров сразу я сделал на c++ используя QT фреймворк. В целом это закаляет.
      Хочешь json - нужна библиотека, хочешь сделать http-запрос на windows - реши несколько проблем.
      Прошло уже несколько лет а помню до сих пор(проблемы а не c++).
      `,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]

  },
  {
    name: "C#",
    experience: "5 years",
    logo: CSharpLogo,
    description: {
      ru: `.net and asp.net - только ознокомительные проекты, WinForm и стандартная библиотека. Последний раз освежал знания после выхода .asp.net.
      Опыт в тестировании используя white фреймворк.`,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]

  },
  {
    name: "PHP",
    experience: "5 years",
    logo: PHPLogo,
    description: {
      ru: `Я был молод мне нужны были деньги. В целом я использовал язык максимально как это было возможно. Начиная с
      5.6 и заканчивая 7.4, не застал только JIT. Всегда мигрировал на последние версии. Использовал типизацию как только она появилась.
      Ставили сборки от Facebook пока в этом был смысл. Так Были единичные опыты с Yii, Symphony но в основном я использовал Laravel.
      Именно благодоря подходам этого фреймворка и комьюнити вокруг него получалось делать сложные проекты.
      Я во всю пользовался возможностями сервис провайдеров в Laravel и успешно создавал сервисы на основе него используя вместе с
      Solr, ElasticSearch, Postgres, MySQL и RabbitMQ. Оформления собственных пакетов. Тут я впервые увидел настоящее легаси
      от которого кровь стынет в жилах, а автор кода не может объяснить почему тут так сделано. В целом если оценивать PHP -
      это пубертат. Язык довольно быстро учится, что позволило взять на себя задачи руководителя.`,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]
  },
  {
    name: "Assembler",
    experience: "5 years",
    logo: AssemblerLogo,
    description: {
      ru: `Теоритически по памяти я смогу написать заголовок программы, объявить переменную в DB и вывести ее поместив
      в нужный регистр вызвав 21ое прерывания. В целом если бы не DOS и FASM в университете, обучение было бы гораздо успешнее.
      Я нашел статью посвященную ассемблеру с проектом который позволял удобно писать код на ассемблере а потом выполнить его
      как в обычной IDE. Потом просто переписывал его на TASM и лабораторная была сдана. Поработал с математическим сопроцессором
      и даже сделал программу которая рисовала фигуры.`,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]

  },
  {
    name: "Dart",
    experience: "5 years",
    logo: DartLogo,
    description: {
      ru: `Да это же Typescript. Крайний язык в изучении, по жизненому циклу похожий на javascript по синтаксису на обычный
      строго типизированный язык. Был изучен для единой цели - разработка приложений на Flutter. Классы, наследование, async.`,
      en: ''
    },
    tags: [STACK_TAGS.Mobile]
  },
  {
    name: "Flutter",
    experience: "6 months",
    logo: FlutterLogo,
    description: {
      ru: `Все ради проекта gomusic.to. UI реализованный как было запланировано при дизайне. Была освоена методология
      BLoC и имплементирована в проекте. Приложение успешно собирается для Android, IOS и WEB. Были переписаны необходимые
      кроссплатформенные библиотеки и написаны свои общение которых происходит через MethodChannel. Когда вопрос стал в выборе
      фреймворка для кроссплатформенной разработки проводя анализ и имея опыт например ReactNative - я пошел на риск и не пожалел.
      Да, проект не идеален, но как когда-то меня удивил QT сейчас это сделал Flutter.`,
      en: ''
    },
    tags: [STACK_TAGS.Mobile]
  },
  {
    name: "GoLang",
    experience: "6 months",
    logo: GoLangLogo,
    description: {
      ru: `Все ради проекта gomusic.to. Наш бекенд разработчик писал на всем что кодировалось. Он влюбился Go,
      наш DevOps чуть-чуть писал на Go и умел с ним работать. Он продал нам эту идею но потом потерял интерес к проекту.
      Я уже говорил, что экстремальное погружение в язык программирования работает когда нужно?
      Контекст, горутины, каналы и гексогональная архитектура. Судя по всему идея упрощения и оптимизации языка
      работает действительно хорошо и с языком получилось ознакомится достаточно быстро. `,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]
  },
  {
    name: "AI & ML for NLP",
    experience: "6 months",
    logo: NLP_Logo,
    description: {
      ru: `В университете мне понравилась сама возможность и ход мыслей для решения задачь NLP.
      В целом то что я обрел в этой области - это красоту применения математики для решения проблем.
      Слова представленные в многомерном пространстве... По собственным ощущением мне удалось обрести определенный
      склад ума для решения подобных задач или когда явным алгоритмом проблема не решается.
      Благодаря этой области я пользовался TensorFlow, gensim, kaggle и загружал компьютер на 44 часа когда тестировал
      автоматический набор параметро. В данный момент это просто хоби :)
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]
  },
  {
    name: "Testing",
    experience: "6 months",
    logo: TestingLogo,
    description: {
      ru: `Тестирование интерфейсов используя White Framework(c#). Тестирование Web интерфейсов используя
      Selenium(python, js), нагрузочное тестирование через JMeter и Yandex.Tank, опыт с Cucumber и синтаксисом Gherkin.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]
  },
  {
    name: "Operational Systems",
    experience: "6 months",
    logo: OperationalSystemLogo,
    description: {
      ru: `Разрабатывал на Windows, Linux(Ubuntu, Centos) и MacOS.
      Знаю причины почему Docker не может смонтировать volume на Windows.
      Работал с WSL, собирал python с исходников и rpm пакеты на машинах без интернета.
      Знаю базовые команды Linux и в общих чертах понимаю принципы работы.`,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]
  },
  {
    name: "Docker",
    experience: "6 months",
    logo: DockerLogo,
    description: {
      ru: `Опыт в создании контейнеров для сборки frontend и запуска приложений на Go, Python, Node.js, PHP и Postgres.
      Иногда docker яявлялся не очевидным решением для некоторых промежуточных модулей которые могли работать только с глобальными
      настройками и зависимостями. В состоянии описать образ, настроить сеть, смонтировать volume.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "Flask & Fast Api",
    experience: "6 months",
    logo: FlaskFastLogo,
    description: {
      ru: `Опыт в создании простых REST приложений выполняющих CRUD операции или роль легкой HTTP обертки для классификаторов на Python.`,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]
  },
  {
    name: "SQL и базы данных",
    experience: "3 months",
    logo: SQLLogo,
    description: {
      ru: `Язык структиророванных запросов созданный для баз данных созаднных на основе реляционной алгебры.
      Если упрощать, то фактически SQL является стандартом а реализация и поддержка зависит от производителя обеспечения самих баз данных
      так же как и других внутренних.
      Postgres`,
      en: ''
    },
    tags: [STACK_TAGS.BackEnd]

  },
  {
    name: "ElasticSearch",
    experience: "3 months",
    logo: ElasticsearchLogo,
    description: {
      ru: `В рамках одного из проектов была задача разработка платформы для окрестрирования приложения.
      В рамках этого проекта мы делали интерфейс который позволял визуализировать данные из разных источников,
      например ElasticSearch и Influx а так же смог бы разделять созданные индексы по правам пользователей(используя SSO).
      Для эластика дополнительно были созданы инструменты частично повторяющие функционал Kibana.
      Сложные агрегационные запросы, теггирование, настройка индексов и привилегий.
      `,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]
  },
  {
    name: "Influx",
    experience: `3 month`,
    logo: InfluxLogo,
    description: {
      ru: `Резюмируя. Ознакомлен с time series базами данных. Настройка привилегий, получилось полностью повторить
      UI интерфейс из Influx 2.0 структуру measurements, fields & buckets запрашивалась при помощи python.,`,
      en: ''
    },
    tags: [STACK_TAGS.Utilities]

  },
  {
    name: "Design",
    experience: `3 month`,
    logo: DesignLogo,
    description: {
      ru: `Проектирование дизайна`,
      en: ''
    },
    tags: [STACK_TAGS.FrontEnd]
  },
]